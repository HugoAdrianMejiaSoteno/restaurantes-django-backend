"""
Django settings for restaurantes project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import dj_database_url #Para hosteo de render, tmb lo instalamos, toda la doc aqui https://docs.render.com/deploy-django
import os

#Vamos a desplegar la app usando render.com y tienen una guia para hacer deploy del proyecto https://docs.render.com/deploy-django

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

#Usamos una variable de ambiente
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
#Como vamos a mandar a produccion el backend hay que mandar  False el DEBUG, Render nos da una variable que detecta si esta en produccion es False y sino es True
DEBUG = 'RENDER' not in os.environ
# DEBUG = False

ALLOWED_HOSTS = []

#Como en produccion el DEBUG esta en False, debemos especificar el allowed_hosts de nuestra aplicacion, para eso render nos ofrece otra variable de entorno que nos dice el host y ya solo es agregarlo a ala lista de ALLOWED_HOST
RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

CORS_ORIGIN_ALLOW_ALL = True  # Permitir solicitudes desde cualquier origen

# O, si deseas permitir solo ciertos orígenes:
# CORS_ORIGIN_WHITELIST = [
#     'http://localhost:5173',  # Agrega aquí el origen de tu aplicación React
#     'https://restaurantes-react-vite.vercel.app' #que no termine en /
# ]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'datosRestaurantes',
    'corsheaders' #se agrega la app que instale de los cors de pip install django-cors-headers
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', #middleware para los cors
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware' #Para servir archivos staticos en render tmb instalamos whitenois
]

ROOT_URLCONF = 'restaurantes.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'restaurantes.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

db_user = os.getenv('DB_USER')
db_password = os.getenv('DB_PASSWORD')

# DATABASES = {
#     # "default": {
#     #     "ENGINE": "django.db.backends.postgresql",
#     #     "NAME": "restaurantes",
#     #     "USER": db_user,
#     #     "PASSWORD": db_password,
#     #     "HOST": "127.0.0.1",
#     #     "PORT": "5432",
#     # }
# }

DATABASES = { #conf de render
    'default': dj_database_url.config(
        # Replace this value with your local database's connection string.
        default='postgresql://postgres:postgres@localhost:5432/mysite',
        conn_max_age=600
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

if not DEBUG:
    # Tell Django to copy static assets into a path called `staticfiles` (this is specific to Render)
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    # Enable the WhiteNoise storage backend, which compresses static files to reduce disk use
    # and renames the files with unique names for each version to support long-term caching
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
